#!/bin/bash
# CUPS print queue plugin for Nagios
# 
# Modified version of check_cups_queue2 which it self is a modified version
# of check_cups_queue written by John E. Vincent (nagios-plugs@lusis.org)
#
# Description:
#
# This plugin will check the status of a remote CUPS
# print queue. It will provide the age of the queue
#

# Location of the lpstat command (if not in path)
LPSTAT="/usr/bin/lpstat"




# Don't change anything below here

# Nagios return codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

if [ ! -x "$LPSTAT" ]
then
	echo "UNKNOWN: $LPSTAT not found or is not executable by the nagios user"
	exitstatus=$STATE_UNKNOWN
	exit $exitstatus
fi

PROGNAME=`basename $0`

print_usage() {
	echo "Usage: $PROGNAME -H <hostname> -T <s|b> -w <size warning level> -c <size critical level> -a <max age>"
	echo ""
	echo "Notes:"
	echo "-H: Hostname - Can be a hostname or IP address"
	echo "-w: WARNING level for queue age"
	echo "-c: CRITICAL level for queue age"
	echo ""
}

print_help() {
	print_usage
	echo ""
	echo "This plugin will check the CUPS print queue on a remote (or local with -H localhost) CUPS server."
	echo "It can check the age of the oldest print job in the queue."
	echo "-w and -c are for reporting warning and critical levels of the queue age."
	echo ""
	exit 0
}

if [ $# -lt 4 ]; then
	print_usage
	exit $STATE_UNKNOWN
fi

exitstatus=$STATE_UNKNOWN #default

while test -n "$1"; do
	case "$1" in
		--help|-h)
			print_help
			exit $STATE_OK
			;;
		-H)
			hostname=$2
			shift
			;;
		-o)
			dest=$2
			shift
			;;
		-w)
			warnlevel=$2
			shift
			;;
		-c)	
			critlevel=$2
			shift
			;;
	esac
	shift
done

# Check arguments for validity
if [ -z $hostname ]
then
	echo "You must specify a hostname (or localhost to test the local system)"
	print_usage
	exitstatus=$STATE_UNKNOWN
	exit $exitstatus
fi

if [[ -z $critlevel || -z $warnlevel ]] # Did we get warn and crit values?
then	
	echo "You must specify a warning and critical level"
	print_usage
	exitstatus=$STATE_UNKNOWN
	exit $exitstatus 
elif [ $critlevel -lt $warnlevel ] # Do the warn/crit values make sense?
then
	echo "CRITICAL value of $critlevel is less than WARNING level of $warnlevel"
	print_usage
	exitstatus=$STATE_UNKNOWN
	exit $exitstatus
else
	JOBTMP=`mktemp -t lpstat.XXXXXX` # Create a tmpfile to store the lpstat results
	CURDATETS=`date +%s` # Get the current date as unixtime
	$LPSTAT -h $hostname -o $dest > $JOBTMP # run the lpstat command against the host.
	if [ $? -ne 0 ]
	then
		rm -rf $JOBTMP
		echo "UNKNOWN: lpstat command returned an error. Please test this script manually."
		exitstatus=$STATE_UNKNOWN
		exit $exitstatus
	fi
	
	DATEDIFF=0
	PERFDATA="job_age=$DATEDIFF;$warnlevel;$critlevel;0"
	MESSAGE="OK: CUPS queue age $DATEDIFF minutes| $PERFDATA"
	exitstatus=$STATE_OK
		
	exec<$JOBTMP # read the file to determine job age
	while read PRINTJOB
	do
		JOBDATE=`echo $PRINTJOB | awk '{ print $4, $5, $6, $7, $8 }'` # Grab the job date from the job listing
		JOBDATETS=`date --date="$JOBDATE" +%s` # Convert the job date to unixtime
		DATEDIFF=$[(CURDATETS - JOBDATETS) / 60] # in minutes
		PERFDATA="job_age=$DATEDIFF;$warnlevel;$critlevel;0"
		if [ $DATEDIFF -gt $critlevel ]
		then
			MESSAGE="CRITICAL: Some CUPS jobs are older than $critlevel minutes| $PERFDATA"
			exitstatus=$STATE_CRITICAL
		elif [ $DATEDIFF -gt $warnlevel ]
		then
			MESSAGE="WARNLEVEL: Some CUPS jobs are older than $warnlevel minutes| $PERFDATA"
			exitstatus=$STATE_WARNING
		else
			MESSAGE="OK: CUPS queue age $DATEDIFF minutes| $PERFDATA"
			exitstatus=$STATE_OK
		fi
	done
	rm -rf $JOBTMP
fi

echo $MESSAGE
exit $exitstatus
